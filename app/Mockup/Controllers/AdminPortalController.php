<?php

/**
 * Siser Software
 * Siser software API specification.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: shengtian.liao@iifuture.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Mockup\Controllers;

use App\Mockup\Models\Repository;
use Illuminate\Support\Facades\Request;

class AdminPortalController extends \App\Http\Controllers\Controller
{
  /**
   * Constructor
   */
  public function __construct(protected Repository $repo)
  {
  }

  /**
   * Operation getConfigGeneral
   *
   * general configuration.
   *
   */
  public function getConfigGeneral()
  {
    return response()->json($this->repo->getConfigGeneral());
  }
  /**
   * Operation updateConfigGeneral
   *
   * general configuration.
   *
   */
  public function updateConfigGeneral()
  {
    $input = Request::all();
    return response()->json($this->repo->updateConfigGeneral((object)$input));
  }
  /**
   * Operation listMachine
   *
   * list machines (stage 1).
   *
   */
  public function listMachine()
  {
    return response()->json(['data' => $this->repo->getMachines()]);
  }
  /**
   * Operation getMachine
   *
   * get machine by id (stage 1).
   *
   * @param int $id  (required)
   */
  public function getMachine($id)
  {
    return response()->json($this->repo->getMachine($id));
  }
  /**
   * Operation createPlan
   *
   * create plan (stage 2+).
   *
   */
  public function createPlan()
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation deletePlan
   *
   * delete plan by id (stage 2+).
   *
   * @param int $id  (required)
   */
  public function deletePlan($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation updatePlan
   *
   * update plan (stage 2+).
   *
   * @param int $id  (required)
   */
  public function updatePlan($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation deactivatePlan
   *
   * deactivate plan (stage 2+).
   *
   * @param int $id  (required)
   */
  public function deactivatePlan($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation createSoftwarePackage
   *
   * create a new software package.
   *
   */
  public function createSoftwarePackage()
  {
    $input = Request::all();
    return response()->json($this->repo->createSoftwarePackage((object)$input), 201);
  }
  /**
   * Operation updateSoftwarePackage
   *
   * update one software package's information.
   *
   * @param int $id  (required)
   */
  public function updateSoftwarePackage($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation createUser
   *
   * create a new customer user (stage 1).
   *
   */
  public function createUser()
  {
    return response()->json($this->repo->createUser(), 201);
  }
  /**
   * Operation listUser
   *
   * list users (stage 1).
   *
   */
  public function listUser()
  {
    return response()->json(['data' => $this->repo->getUsers()]);
  }
  /**
   * Operation getUser
   *
   * get one users (stage 1).
   *
   * @param int $id  (required)
   */
  public function getUser($id)
  {
    return response()->json($this->repo->getUser($id));
  }
  /**
   * Operation updateUser
   *
   * refresh one user (stage 1).
   *
   * @param int $id  (required)
   */
  public function updateUser($id)
  {
    return response()->json($this->repo->getUser($id));
  }
  /**
   * Operation createUserDetails
   *
   * create one user's invoice-details (stage 2+).
   *
   * @param int $id  (required)
   */
  public function createUserDetails($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation getUserDetail
   *
   * get one users's detail (stage 2+).
   *
   * @param int $id  (required)
   */
  public function getUserDetail($id)
  {
    $this->repo->getUser($id);
    return response()->json((object)null);
  }
  /**
   * Operation updateUserDetails
   *
   * update one user's invoice-details (stage 2+).
   *
   * @param int $id  (required)
   */
  public function updateUserDetails($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation userGetMachines
   *
   * get user's machine list (stage 1).
   *
   * @param int $id  (required)
   */
  public function userGetMachines($id)
  {
    return response()->json(['data' => $this->repo->getUserMachines($id)]);
  }
  /**
   * Operation getUserSubscription
   *
   * get a users's subscription (stage 2+).
   *
   * @param int $id  (required)
   */
  public function getUserSubscription($id)
  {
    return response()->json($this->repo->getUserSubscription($id));
  }
}
