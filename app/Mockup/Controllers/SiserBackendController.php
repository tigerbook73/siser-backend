<?php

/**
 * Siser Software
 * Siser software API specification.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: shengtian.liao@iifuture.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Mockup\Controllers;

use App\Mockup\Models\Repository;
use Illuminate\Support\Facades\Request;

class SiserBackendController extends \App\Http\Controllers\Controller
{
  /**
   * Constructor
   */
  public function __construct(protected Repository $repo)
  {
  }

  /**
   * Operation createMachine
   *
   * create/register a new machines (stage 1).
   *
   */
  public function createMachine()
  {
    $input = Request::all();
    return response()->json($this->repo->createMachine((object)$input), 201);
  }
  /**
   * Operation listMachine
   *
   * list machines (stage 1).
   *
   */
  public function listMachine()
  {
    return response()->json(['data' => $this->repo->getMachines()]);
  }
  /**
   * Operation deleteMachine
   *
   * delete machine by id (stage 1).
   *
   * @param int $id  (required)
   */
  public function deleteMachine($id)
  {
    $this->repo->deleteMachine($id);
    return response()->json((object)null, 204);
  }
  /**
   * Operation getMachine
   *
   * get machine by id (stage 1).
   *
   * @param int $id  (required)
   */
  public function getMachine($id)
  {
    return response()->json($this->repo->getMachine($id));
  }
  /**
   * Operation transferMachine
   *
   * transfer one machine to another user (stage 2+).
   *
   * @param int $id  (required)
   */
  public function transferMachine($id)
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation createSubscriptionReport
   *
   * generate subscription report (stage 2+).
   *
   */
  public function createSubscriptionReport()
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation createUser
   *
   * create a new customer user (stage 1).
   *
   */
  public function createUser()
  {
    return response()->json($this->repo->createUser(), 201);
  }
  /**
   * Operation listUser
   *
   * list users (stage 1).
   *
   */
  public function listUser()
  {
    return response()->json(['data' => $this->repo->getUsers()]);
  }
  /**
   * Operation getUser
   *
   * get one users (stage 1).
   *
   * @param int $id  (required)
   */
  public function getUser($id)
  {
    return response()->json($this->repo->getUser($id));
  }
  /**
   * Operation updateUser
   *
   * refresh one user (stage 1).
   *
   * @param int $id  (required)
   */
  public function updateUser($id)
  {
    return response()->json($this->repo->getUser($id));
  }
}
