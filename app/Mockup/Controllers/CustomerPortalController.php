<?php

/**
 * Siser Software
 * Siser software API specification.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: shengtian.liao@iifuture.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Mockup\Controllers;

use App\Mockup\Models\Repository;
use Illuminate\Support\Facades\Request;

class CustomerPortalController extends \App\Http\Controllers\Controller
{
  /**
   * Constructor
   */
  public function __construct(protected Repository $repo)
  {
  }

  /**
   * Operation accountCreateDetail
   *
   * create sign-user's invoice details (stage 2+).
   *
   */
  public function accountCreateDetail()
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation accountGetDetail
   *
   * get sign-user's invoice details (stage 2+).
   *
   */
  public function accountGetDetail()
  {
    return response()->json((object)null);
  }
  /**
   * Operation accountUpdateDetail
   *
   * update sign-user's invoice details (stage 2+).
   *
   */
  public function accountUpdateDetail()
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation accountListInvoices
   *
   * list invoices (stage 2+).
   *
   */
  public function accountListInvoices()
  {
    return response()->json(['data' => []]);
  }
  /**
   * Operation accountGetInvoice
   *
   * get one invoice (stage 2+).
   *
   * @param int $id  (required)
   */
  public function accountGetInvoice($id)
  {
    abort(404, "Not Found");
  }
  /**
   * Operation accountGetMachines
   *
   * get sign-user's machine list (stage 1).
   *
   */
  public function accountGetMachines()
  {
    $user_id = 1;
    return response()->json(['data' => $this->repo->getUserMachines($user_id)]);
  }
  /**
   * Operation accountCreatePaymentMethod
   *
   * create/replace sign-user's payment method (stage 2+).
   *
   */
  public function accountCreatePaymentMethod()
  {
    abort(400, 'Not implemented yet!');
  }
  /**
   * Operation accountGetPaymentMethod
   *
   * get sign-user's payment method (stage 2+).
   *
   */
  public function accountGetPaymentMethod()
  {
    return response()->json((object)null);
  }
  /**
   * Operation accountGetSubscription
   *
   * get subscription (stage 1).
   *
   */
  public function accountGetSubscription()
  {
    $user_id = 1;
    return response()->json($this->repo->getUserSubscription($user_id));
  }
}
