<?php

/**
 * Siser Software
 * Siser software API specification.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: shengtian.liao@iifuture.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/**
 * get getConfigGeneral
 * Summary: general configuration
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/config/general', 'App\Mockup\Controllers\AdminPortalController@getConfigGeneral');
/**
 * patch updateConfigGeneral
 * Summary: general configuration
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::patch('/v1/config/general', 'App\Mockup\Controllers\AdminPortalController@updateConfigGeneral');
/**
 * get listMachine
 * Summary: list machines (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/machines', 'App\Mockup\Controllers\AdminPortalController@listMachine');
/**
 * get getMachine
 * Summary: get machine by id (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/machines/{id}', 'App\Mockup\Controllers\AdminPortalController@getMachine');
/**
 * post createPlan
 * Summary: create plan (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/plans', 'App\Mockup\Controllers\AdminPortalController@createPlan');
/**
 * delete deletePlan
 * Summary: delete plan by id (stage 2+)
 * Notes: plan can be deleted only when it has never been referenced.

 */
Route::delete('/v1/plans/{id}', 'App\Mockup\Controllers\AdminPortalController@deletePlan');
/**
 * patch updatePlan
 * Summary: update plan (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::patch('/v1/plans/{id}', 'App\Mockup\Controllers\AdminPortalController@updatePlan');
/**
 * post deactivatePlan
 * Summary: deactivate plan (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/plans/{id}/deactivate', 'App\Mockup\Controllers\AdminPortalController@deactivatePlan');
/**
 * post createSoftwarePackage
 * Summary: create a new software package
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/software-packages', 'App\Mockup\Controllers\AdminPortalController@createSoftwarePackage');
/**
 * patch updateSoftwarePackage
 * Summary: update one software package&#39;s information
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::patch('/v1/software-packages/{id}', 'App\Mockup\Controllers\AdminPortalController@updateSoftwarePackage');
/**
 * post createUser
 * Summary: create a new customer user (stage 1)
 * Notes: User information will come from cognito. Client need to provide either username or access_token for the user.
 * Output-Formats: [application/json]
 */
Route::post('/v1/users', 'App\Mockup\Controllers\AdminPortalController@createUser');
/**
 * get listUser
 * Summary: list users (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users', 'App\Mockup\Controllers\AdminPortalController@listUser');
/**
 * get getUser
 * Summary: get one users (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users/{id}', 'App\Mockup\Controllers\AdminPortalController@getUser');
/**
 * post updateUser
 * Summary: refresh one user (stage 1)
 * Notes: User information will come from cognito.
 * Output-Formats: [application/json]
 */
Route::post('/v1/users/{id}', 'App\Mockup\Controllers\AdminPortalController@updateUser');
/**
 * post createUserDetails
 * Summary: create one user&#39;s invoice-details (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/users/{id}/invoice-details', 'App\Mockup\Controllers\AdminPortalController@createUserDetails');
/**
 * get getUserDetail
 * Summary: get one users&#39;s detail (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users/{id}/invoice-details', 'App\Mockup\Controllers\AdminPortalController@getUserDetail');
/**
 * patch updateUserDetails
 * Summary: update one user&#39;s invoice-details (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::patch('/v1/users/{id}/invoice-details', 'App\Mockup\Controllers\AdminPortalController@updateUserDetails');
/**
 * get userGetMachines
 * Summary: get user&#39;s machine list (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users/{id}/machines', 'App\Mockup\Controllers\AdminPortalController@userGetMachines');
/**
 * get getUserSubscription
 * Summary: get a users&#39;s subscription (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users/{id}/subscription', 'App\Mockup\Controllers\AdminPortalController@getUserSubscription');
/**
 * get authGetMe
 * Summary: get signed-in user&#39;s information (stage 1)
 * Notes: This API is used for API based client app (e.g. LDS software, SPA) to retrieve detail user information, e.g roles.
 * Output-Formats: [application/json]
 */
Route::get('/v1/auth/me', 'App\Mockup\Controllers\AuthenticationController@authGetMe');
/**
 * post authCreateToken
 * Summary: create an access token (stage 1)
 * Notes: This API is used for API based client (e.g. siser backup) to generate long-live access-token. The caller must either have been authenticated from web session or provide coginito access_token.
 * Output-Formats: [application/json]
 */
Route::post('/v1/auth/token', 'App\Mockup\Controllers\AuthenticationController@authCreateToken');
/**
 * post accountCreateDetail
 * Summary: create sign-user&#39;s invoice details (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/account/invoice-details', 'App\Mockup\Controllers\CustomerPortalController@accountCreateDetail');
/**
 * get accountGetDetail
 * Summary: get sign-user&#39;s invoice details (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/account/invoice-details', 'App\Mockup\Controllers\CustomerPortalController@accountGetDetail');
/**
 * patch accountUpdateDetail
 * Summary: update sign-user&#39;s invoice details (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::patch('/v1/account/invoice-details', 'App\Mockup\Controllers\CustomerPortalController@accountUpdateDetail');
/**
 * get accountListInvoices
 * Summary: list invoices (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/account/invoices', 'App\Mockup\Controllers\CustomerPortalController@accountListInvoices');
/**
 * get accountGetInvoice
 * Summary: get one invoice (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/account/invoices/{id}', 'App\Mockup\Controllers\CustomerPortalController@accountGetInvoice');
/**
 * get accountGetMachines
 * Summary: get sign-user&#39;s machine list (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/account/machines', 'App\Mockup\Controllers\CustomerPortalController@accountGetMachines');
/**
 * post accountCreatePaymentMethod
 * Summary: create/replace sign-user&#39;s payment method (stage 2+)
 * Notes: this API is used to submit a request to create a credit/debit card based payment-method. For PayPal, TODO
 * Output-Formats: [application/json]
 */
Route::post('/v1/account/payment-method', 'App\Mockup\Controllers\CustomerPortalController@accountCreatePaymentMethod');
/**
 * get accountGetPaymentMethod
 * Summary: get sign-user&#39;s payment method (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/account/payment-method', 'App\Mockup\Controllers\CustomerPortalController@accountGetPaymentMethod');
/**
 * get accountGetSubscription
 * Summary: get subscription (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/account/subscription', 'App\Mockup\Controllers\CustomerPortalController@accountGetSubscription');
/**
 * post softwareCheckIn
 * Summary: LDS software check-in (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/software/check-in', 'App\Mockup\Controllers\LDSSoftwareController@softwareCheckIn');
/**
 * get softwareCheckInGet
 * Summary: LDS software check-in (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/software/check-in', 'App\Mockup\Controllers\LDSSoftwareController@softwareCheckInGet');
/**
 * post softwareCheckOut
 * Summary: LDS software check-out (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/software/check-out', 'App\Mockup\Controllers\LDSSoftwareController@softwareCheckOut');
/**
 * get softwareCheckOutGet
 * Summary: LDS software check-out (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/software/check-out', 'App\Mockup\Controllers\LDSSoftwareController@softwareCheckOutGet');
/**
 * get listPlan
 * Summary: list plan (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/plans', 'App\Mockup\Controllers\PublicController@listPlan');
/**
 * get getPlan
 * Summary: get plan by id (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/plans/{id}', 'App\Mockup\Controllers\PublicController@getPlan');
/**
 * get listSoftwarePackages
 * Summary: retrieves software packages and their download url (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/software-packages', 'App\Mockup\Controllers\PublicController@listSoftwarePackages');
/**
 * get getSoftwarePackage
 * Summary: retrieves one software package and their download url (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/software-packages/{id}', 'App\Mockup\Controllers\PublicController@getSoftwarePackage');
/**
 * post createMachine
 * Summary: create/register a new machines (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/machines', 'App\Mockup\Controllers\SiserBackendController@createMachine');
/**
 * get listMachine
 * Summary: list machines (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/machines', 'App\Mockup\Controllers\SiserBackendController@listMachine');
/**
 * delete deleteMachine
 * Summary: delete machine by id (stage 1)
 * Notes: 

 */
Route::delete('/v1/machines/{id}', 'App\Mockup\Controllers\SiserBackendController@deleteMachine');
/**
 * get getMachine
 * Summary: get machine by id (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/machines/{id}', 'App\Mockup\Controllers\SiserBackendController@getMachine');
/**
 * post transferMachine
 * Summary: transfer one machine to another user (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/machines/{id}/transfer', 'App\Mockup\Controllers\SiserBackendController@transferMachine');
/**
 * post createSubscriptionReport
 * Summary: generate subscription report (stage 2+)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::post('/v1/report/subscriptions', 'App\Mockup\Controllers\SiserBackendController@createSubscriptionReport');
/**
 * post createUser
 * Summary: create a new customer user (stage 1)
 * Notes: User information will come from cognito. Client need to provide either username or access_token for the user.
 * Output-Formats: [application/json]
 */
Route::post('/v1/users', 'App\Mockup\Controllers\SiserBackendController@createUser');
/**
 * get listUser
 * Summary: list users (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users', 'App\Mockup\Controllers\SiserBackendController@listUser');
/**
 * get getUser
 * Summary: get one users (stage 1)
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/users/{id}', 'App\Mockup\Controllers\SiserBackendController@getUser');
/**
 * post updateUser
 * Summary: refresh one user (stage 1)
 * Notes: User information will come from cognito.
 * Output-Formats: [application/json]
 */
Route::post('/v1/users/{id}', 'App\Mockup\Controllers\SiserBackendController@updateUser');
/**
 * get commonErrorExample
 * Summary: example for error response
 * Notes: 
 * Output-Formats: [application/json]
 */
Route::get('/v1/test/http-code', 'App\Mockup\Controllers\TestController@commonErrorExample');
/**
 * post testReset
 * Summary: reset test data
 * Notes: 

 */
Route::post('/v1/test/reset-data', 'App\Mockup\Controllers\TestController@testReset');
